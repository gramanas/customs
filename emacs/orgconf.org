* CONFIGURATION
** General
*** Trivial Stuff
#+BEGIN_SRC emacs-lisp
  (setq default-input-method "greek")  
  (semantic-mode 1)
  (menu-bar-mode -1)
  (column-number-mode t)
  (global-linum-mode -1)
  (line-number-mode t)
  (scroll-bar-mode -1)
  (show-paren-mode t)
  (tool-bar-mode -1)
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

*** Packages
**** Init
#+BEGIN_SRC emacs-lisp 
  (require 'cl)
  (require 'package)
  (package-initialize)
  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("org" . "http://orgmode.org/elpa/")
          ("melpa" . "https://melpa.org/packages/")
          ("melpa-stable" . "https://stable.melpa.org/packages/")))
#+END_SRC

**** default-packages
Tangle is set to NO since I dont want to check every time I start emacs or emacsdaemon.
#+BEGIN_SRC emacs-lisp :tangle no
  (let* ((packages
          '(ace-jump-mode      
            ace-window         
            alert              
            anaconda-mode      
            async              
            auctex             
            auto-complete      
            autothemer         
            avy                
            change-inner       
            color-theme-sanityinc-tomorrow 
            company            
            company-anaconda   
            company-math       
            darktooth-theme    
            dash               
            embrace            
            epl                
            expand-region      
            f                  
            fill-column-indicator
            flycheck           
            flyspell-correct   
            git-commit         
            gntp               
            helm               
            helm-company       
            helm-core          
            helm-flycheck      
            helm-projectile    
            helm-swoop         
            ivy                
            jump-char          
            linum-relative     
            log4e              
            magit              
            magit-popup        
            math-symbol-lists  
            monokai-theme      
            multiple-cursors   
            packed             
            pkg-info           
            popup              
            projectile         
            pythonic           
            s 
            smartparens        
            swiper             
            with-editor
            yasnippet          
            ace-mc))
         ;; Remove all packages already installed
         (packages (remove-if 'package-installed-p packages)))
    (when packages
      (ignore-errors (package-refresh-contents)
                     (mapcar 'package-install packages))))
#+END_SRC

*** Spellcheck
**** change dictionary
#+BEGIN_SRC emacs-lisp 
  (defun fd-switch-dictionary()
  (interactive)
  (let* ((dic ispell-current-dictionary)
     (change (if (string= dic "greek") "english" "greek")))
    (ispell-change-dictionary change)
    (message "%s dictionary" dic change)
    ))

  (global-set-key (kbd "<f8>") 'fd-switch-dictionary)
#+END_SRC

*** Looks & Feels
**** Themes
***** leuven
#+BEGIN_SRC emacs-lisp :results output silent
  (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/leuven-theme-20170309.1340")
  (load-theme 'leuven t)
#+END_SRC

***** base-16
#+BEGIN_SRC emacs-lisp :tangle no :results output silent
  (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/base16-theme-20170317.1130")
  (load-theme 'base16-chalk t)
#+END_SRC

***** Darktooth
#+BEGIN_SRC emacs-lisp :tangle no :results output silent
  (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/darktooth-theme-20170216.2034")
  (load-theme 'darktooth t)
#+END_SRC

***** Moe
#+BEGIN_SRC emacs-lisp :tangle no :results output silent
  (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/moe-theme-20170111.1838")
  (load-theme 'moe-dark t)
#+END_SRC

***** Sanityinc tomorrow
#+BEGIN_SRC emacs-lisp :tangle no :results output silent
  (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/color-theme-sanityinc-tomorrow-20170106.1620/")
  (load-theme 'sanityinc-tomorrow-bright t)
#+END_SRC

***** Ample
#+BEGIN_SRC emacs-lisp :tangle no :results output silent
  (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/ample-theme-20161213.912")
  (load-theme 'ample t)
#+END_SRC

***** black and white
#+BEGIN_SRC emacs-lisp :tangle no :results output silent
  (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/tao-theme-20170209.950")
  (load-theme 'tao-yin t)
#+END_SRC

***** Monokai
#+BEGIN_SRC emacs-lisp :tangle no :results output silent
  (add-to-list 'custom-theme-load-path "~/.emacs.d/elpa/monokai-theme-20161216.628")
  (load-theme 'monokai t)
#+END_SRC

**** fonts
#+BEGIN_SRC emacs-lisp 
  (add-to-list 'default-frame-alist '(font . "Source Code Pro 10" ))
  (set-face-attribute 'default t :font "Source Code Pro 10" )

;  (set-frame-font "Source Code Pro 10")
#+END_SRC

**** Highlight current line
#+BEGIN_SRC emacs-lisp :tangle no
  (global-hl-line-mode t)
#+END_SRC

**** Miscs
#+BEGIN_SRC emacs-lisp 
  (setq auto-revert-interval 1            ; Refresh buffers fast
  ;too soon        
  ;custom-file (make-temp-file "")   ; Discard customization's
        echo-keystrokes 0.1               ; Show keystrokes asap
        inhibit-startup-message t         ; No splash screen please
        initial-scratch-message ";; Welcome aboard\n\n"       ; Clean scratch buffer
        recentf-max-saved-items 100       ; Show more recent files
        ring-bell-function 'ignore        ; Quiet
        sentence-end-double-space nil    ; No double space
        show-paren-mode t)

  (setq-default fill-column 79                    ; Maximum line width
                truncate-lines t                  ; Don't fold lines
                indent-tabs-mode nil)              ; Use spaces instead of tabs
                ;split-width-threshold 40         ; Split verticly by default
                ;auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere
#+END_SRC

**** transparent background on terminal
#+BEGIN_SRC emacs-lisp :tangle no
;; "no clue" how it works
(defun on-frame-open (frame)
  (if (not (display-graphic-p frame))
      (set-face-background 'default "unspecified-bg" frame)))
(on-frame-open (selected-frame))
(add-hook 'after-make-frame-functions 'on-frame-open)

(defun on-after-init ()
  (unless (display-graphic-p (selected-frame))
    (set-face-background 'default "unspecified-bg" (selected-frame))))

(add-hook 'window-setup-hook 'on-after-init)
#+END_SRC

**** python indent
#+BEGIN_SRC emacs-lisp 
  (setq python-indent-offset 2)
#+END_SRC

*** Utils
**** resize windows
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)
#+END_SRC

**** save macro
#+BEGIN_SRC emacs-lisp 
  (defun save-macro (name)
  "save a macro. Take a name as argument
   and save the last defined macro under
   this name at the end of your .emacs"
   (interactive "SName of the macro :")  ; ask for the name of the macro
   (kmacro-name-last-macro name)         ; use this name for the macro
   (find-file "~/.emacs.d/orgconf.org")            ; open ~/.emacs or other user init file
   (goto-char (point-max))               ; go to the end of the .emacs
   (newline)                             ; insert a newline
   (insert-kbd-macro name)               ; copy the macro
   (newline)                             ; insert a newline
   (switch-to-buffer nil))               ; return to the initial buffer
#+END_SRC

**** linum
#+BEGIN_SRC emacs-lisp :tangle no
;; '(global-linum-mode t)
#+END_SRC

**** kill-word
#+BEGIN_SRC emacs-lisp 
  (fset 'Kill\ word
        (lambda (&optional arg) 
          "Keyboard macro." 
        (interactive "p") 
        (kmacro-exec-ring-item 
         (quote ([134217848 101 114 47 109 97 114 107 45 119 111 100 backspace 114 100 return delete] 0 "%d")) arg)))

  (global-set-key (kbd "C-c w") 'Kill\ word)
#+END_SRC

**** view buffer name
#+BEGIN_SRC emacs-lisp 
(defun hrs/view-buffer-name ()
  "Display the filename of the current buffer."
  (interactive)
  (message (buffer-file-name)))

(global-set-key (kbd "C-c v") 'hrs/view-buffer-name)
#+END_SRC

**** kill buffer -no questions asked-
#+BEGIN_SRC emacs-lisp 
(defun hrs/kill-current-buffer ()
  "Kill the current buffer without prompting."
  (interactive)
  (kill-buffer (current-buffer)))

(global-set-key (kbd "C-x k") 'hrs/kill-current-buffer)
#+END_SRC

**** sudoedit inside emacs
#+BEGIN_SRC emacs-lisp 
(defun hrs/find-file-as-sudo ()
  (interactive)
  (let ((file-name (buffer-file-name)))
    (when file-name
      (find-alternate-file (concat "/sudo::" file-name)))))

(global-set-key (kbd "C-c f s") 'hrs/find-file-as-sudo)
#+END_SRC

**** replace 'yes or no' with 'y or n'
#+BEGIN_SRC emacs-lisp 
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

**** Split n Switch
#+BEGIN_SRC emacs-lisp 
  ;; switch when split
  (defun hrs/split-window-below-and-switch ()
    "Split the window horizontally, then switch to the new pane."
    (interactive)
    (split-window-below)
    (other-window 1))

  (defun hrs/split-window-right-and-switch ()
    "Split the window vertically, then switch to the new pane."
    (interactive)
    (split-window-right)
      (other-window 1))

  (global-set-key (kbd "C-x 2") 'hrs/split-window-below-and-switch)
  (global-set-key (kbd "C-x 3") 'hrs/split-window-right-and-switch)
#+END_SRC

**** delete spaces around cursors
#+BEGIN_SRC emacs-lisp 
  (defun cycle-spacing-delete-newlines ()
    "Removes whitespace before and after the point."
    (interactive)
    (if (version< emacs-version "24.4")
        (just-one-space -1)
      (cycle-spacing -1)))

  (global-set-key (kbd "C-c j") 'cycle-spacing-delete-newlines)
#+END_SRC

**** jump to symbol like this
#+BEGIN_SRC emacs-lisp 
  (defun jump-to-symbol-internal (&optional backwardp)
    "Jumps to the next symbol near the point if such a symbol
  exists. If BACKWARDP is non-nil it jumps backward."
    (let* ((point (point))
           (bounds (find-tag-default-bounds))
           (beg (car bounds)) (end (cdr bounds))
           (str (isearch-symbol-regexp (find-tag-default)))
           (search (if backwardp 'search-backward-regexp
                     'search-forward-regexp)))
      (goto-char (if backwardp beg end))
      (funcall search str nil t)
      (cond ((<= beg (point) end) (goto-char point))
            (backwardp (forward-char (- point beg)))
            (t  (backward-char (- end point))))))

  (defun jump-to-previous-like-this ()
    "Jumps to the previous occurrence of the symbol at point."
    (interactive)
    (jump-to-symbol-internal t))

  (defun jump-to-next-like-this ()
    "Jumps to the next occurrence of the symbol at point."
    (interactive)
    (jump-to-symbol-internal))

  (global-set-key (kbd "M-p") 'jump-to-previous-like-this)
  (global-set-key (kbd "M-n") 'jump-to-next-like-this)
  (global-set-key (kbd "M-.") 'jump-to-next-like-this)
  (global-set-key (kbd "M-,") 'jump-to-previous-like-this)
#+END_SRC

**** duplicate thing
#+BEGIN_SRC emacs-lisp 
  (defun duplicate-thing (comment)
    "Duplicates the current line, or the region if active. If an argument is
  given, the duplicated region will be commented out."
    (interactive "P")
    (save-excursion
      (let ((start (if (region-active-p) (region-beginning) (point-at-bol)))
            (end   (if (region-active-p) (region-end) (point-at-eol))))
        (goto-char end)
        (unless (region-active-p)
          (newline))
        (insert (buffer-substring start end))
        (when comment (comment-region start end)))))

  (global-set-key (kbd "C-c d")   'duplicate-thing)
#+END_SRC

**** kbd to kill daemon
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-c x")
      (lambda ()
      (interactive)
      (save-buffers-kill-emacs t)))
#+END_SRC

*** TeX
**** Tex Engine to use greek
#+BEGIN_SRC emacs-lisp 
  (setq-default TeX-engine 'xetex)
#+END_SRC

**** AucTeX preview size 
#+BEGIN_SRC emacs-lisp 
  (set-default 'preview-scale-function 1)
  (defun update-org-latex-fragment-scale ()
    (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
      (plist-put org-format-latex-options :scale (* 5.3 text-scale-factor))))
  (add-hook 'text-scale-mode-hook 'update-org-latex-fragment-scale)
#+END_SRC

**** AucTeX master file
     nil if i want to work with master file
#+BEGIN_SRC emacs-lisp 
  (setq-default TeX-master nil)
#+END_SRC

**** Tex-view program selection
#+BEGIN_SRC emacs-lisp 
  (setq
   TeX-view-program-selection
   (quote
    (((output-dvi has-no-display-manager)
      "dvi2tty")
     ((output-dvi style-pstricks)
      "dvips and gv")
     (output-dvi "xdvi")
     (output-pdf "Zathura")
     (output-html "xdg-open"))))
#+END_SRC

*** file to mode asociation
**** unix-conf-mode for systed units
#+BEGIN_SRC emacs-lisp 
 (add-to-list 'auto-mode-alist '("\\.service\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.timer\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.target\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.mount\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.slice\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.socket\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.path\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.netdev\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.network\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.link\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
#+END_SRC

**** conf-mode for files ending with rc
#+BEGIN_SRC emacs-lisp 
  (add-to-list 'auto-mode-alist '("/[^/]*rc" . conf-mode) t)
#+END_SRC

**** mutt support
Set mail mode for mutt files and replace C-x # witn C-c C-c

#+BEGIN_SRC emacs-lisp 
  ;; mail-mode when on mutt, probably will change to notmuch-message-mode
  (setq auto-mode-alist (append '(("/tmp/mutt.*" . mail-mode)) auto-mode-alist))

  ;; Yes, you can do this same trick with the cool "It's All Text" firefox add-on :-)
  (add-to-list 'auto-mode-alist '("/mutt-\\|itsalltext.*mail\\.google" . mail-mode))
  (add-hook
   'mail-mode-hook
   (lambda ()
     (define-key mail-mode-map [(control c) (control c)]
       (lambda ()
         (interactive)
         (save-buffer)
         (server-edit)))))
#+END_SRC

*** registrers
#+BEGIN_SRC emacs-lisp 
  (set-register ?t '(file . "~/org"))
  (set-register ?s '(file . "~/.mbsyncrc"))
  (set-register ?e '(file . "~/customs/emacs/orgconf.org"))
  (set-register ?C '(file . "~/customs/"))
#+END_SRC

*** Custom file
**** Sane thing to do (disable it)
#+BEGIN_SRC emacs-lisp 
  custom-file (make-temp-file "")
#+END_SRC

**** If i want to have it
#+BEGIN_SRC emacs-lisp  :tangle no
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC

*** Autosaves
#+BEGIN_SRC emacs-lisp 
  (defvar emacs-autosave-directory
    (concat user-emacs-directory "autosaves/")
    "This variable dictates where to put auto saves. It is set to a
    directory called autosaves located wherever your .emacs.d/ is
    located.")

  ;; Sets all files to be backed up and auto saved in a single directory.
  (setq backup-directory-alist
        `((".*" . ,emacs-autosave-directory))
        auto-save-file-name-transforms
        `((".*" ,emacs-autosave-directory t)))    
#+END_SRC

*** dired something
#+BEGIN_SRC emacs-lisp 
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

** Package Configurations
*** Org-Mode
**** Display Settings
***** Pretty colors for code blocks
#+BEGIN_SRC emacs-lisp 
  (setq org-src-fontify-natively t)
#+END_SRC

***** Bigger latex formulas
#+BEGIN_SRC emacs-lisp 
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))
#+END_SRC

**** Tabs act naturally in code snipets
#+BEGIN_SRC emacs-lisp 
  (setq org-src-tab-acts-natively t)
#+END_SRC

**** todo keywords
#+BEGIN_SRC emacs-lisp 
  (setq org-todo-keywords
        '((sequence "TODO(t)" "WAITING(w)" "STARTED(s)" "STUDY(y)" "|" "CANCELED(c)" "DONE(d)")))
#+END_SRC

**** todo faces
#+BEGIN_SRC emacs-lisp 
  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "green" :weight bold)) 
          ("STARTED" . (:foreground "cadet blue" :weight bold))
          ("STUDY" . (:foreground "snow" :weight bold))
          ("WAITING" . (:foreground "yellow" :weight bold)) 
          ("CANCELED" . (:foreground "black" :weight bold))
          ("DONE" . (:foreground "dim gray" :weight bold))))
#+END_SRC

**** export
Html export has a proble with fci-mode, here is the fix
https://lists.gnu.org/archive/html/emacs-orgmode/2014-09/msg00777.html
***** latex packages
#+BEGIN_SRC emacs-lisp 
  (with-eval-after-load 'ox-latex  
    (add-to-list 'org-latex-classes
                 '("article"
                   "\\documentclass[11pt]{article}
    [NO-DEFAULT-PACKAGES]
    \\usepackage{fixltx2e}
    \\usepackage{graphicx}
    \\usepackage{longtable}
    \\usepackage{float}
    \\usepackage{wrapfig}
    \\usepackage{rotating}
    \\usepackage[normalem]{ulem}
    \\usepackage{amsmath}
    \\usepackage{textcomp}
    \\usepackage{marvosym}
    \\usepackage{wasysym}
    \\usepackage{amssymb}
    \\usepackage{hyperref}
    \\tolerance=1000
    \\usepackage{fullpage}
    \\usepackage{pdfpages}
    \\usepackage{amsmath}
    \\usepackage{listings}
    \\usepackage[cm-default]{fontspec}
    \\usepackage{xunicode}
    \\usepackage{xltxtra}
    \\usepackage{xgreek}
    \\setmainfont[Mapping=tex-text]{GFS Didot}
    \\setmonofont[Mapping=tex-text]{Source Code Pro}
  \\definecolor{mycomment}{HTML}{7A7A7A}
  \\definecolor{mygray}{rgb}{0.5,0.5,0.5}
  \\definecolor{mymauve}{rgb}{0.58,0,0.82}
  \\definecolor{background}{HTML}{EEEEEE}

  \\lstset{ %
    keywordstyle=\\color{blue},       % keyword style
    backgroundcolor=\\color{background},   % choose the background color; you must add \\usepackage{color} or \\usepackage{xcolor}; should come as last argument
    basicstyle=\\footnotesize\\ttfamily,        % the size of the fonts that are used for the code
    breakatwhitespace=false,         % sets if automatic breaks should only happen at whitespace
    breaklines=true,                 % sets automatic line breaking
    captionpos=b,                    % sets the caption-position to bottom
    commentstyle=\\color{mycomment},    % comment style
    deletekeywords={...},            % if you want to delete keywords from the given language
    escapeinside={\\%*}{*},           % if you want to add LaTeX within your code
    extendedchars=true,              % lets you use non-ASCII characters; for 8-bits encodings only, does not work with UTF-8
    frame=false,                     % adds a frame around the code
    keepspaces=true,                 % keeps spaces in text, useful for keeping indentation of code (possibly needs columns=flexible)  
    language=python,                 % the language of the code
    morekeywords={*,...},            % if you want to add more keywords to the set
    numbers=none,                    % where to put the line-numbers; possible values are (none, left, right)
    %numbersep=5pt,                   % how far the line-numbers are from the code
    %numberstyle=\\tiny\\color{mygray}, % the style that is used for the line-numbers
    %stepnumber=1,                    % the step between two line-numbers. If it's 1, each line will be numbered
    rulecolor=\\color{black},         % if not set, the frame-color may be changed on line-breaks within not-black text (e.g. comments (green here))
    showspaces=false,                % show spaces everywhere adding particular underscores; it overrides 'showstringspaces'
    showstringspaces=false,          % underline spaces within strings only
    showtabs=false,                  % show tabs within strings adding particular underscores
    stringstyle=\\color{mymauve},     % string literal style
    tabsize=2,                       % sets default tabsize to 2 spaces
    %title=\\footnotesize\\ttfamily> \\lstname                   % show the filename of files included with \\lstinputlisting; also try caption instead of title
    % caption='Sample code'
  }
  "
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

***** latex engine
I can use #+latex_compiler: xelatex instead of the following code
But since the packages above require xelatex i'll stick with 
this one
#+BEGIN_SRC emacs-lisp 
  (setq org-latex-pdf-process
     '("latexmk -pdflatex=xelatex -pdf %f"))
#+END_SRC

***** export listings
#+BEGIN_SRC emacs-lisp 
  (setq org-latex-listings t)
  (setq org-latex-listings-langs (quote ((emacs-lisp "Lisp") (lisp "Lisp") (clojure "Lisp") (c "C") (cc "C++") (fortran "fortran") (perl "Perl") (cperl "Perl") (python "Python") (ruby "Ruby") (html "HTML") (xml "XML") (tex "TeX") (latex "[LaTeX]TeX") (shell-script "bash") (gnuplot "Gnuplot") (ocaml "Caml") (caml "Caml") (sql "SQL") (sqlite "sql") (R-mode "R"))))
  (setq org-export-latex-listings t)
  (setq org-export-latex-listings-langs (quote ((emacs-lisp "Lisp") (lisp "Lisp") (clojure "Lisp") (c "C") (cc "C++") (fortran "fortran") (perl "Perl") (cperl "Perl") (python "Python") (ruby "Ruby") (html "HTML") (xml "XML") (tex "TeX") (latex "TeX") (shell-script "bash") (gnuplot "Gnuplot") (ocaml "Caml") (caml "Caml") (sql "SQL") (sqlite "sql") (R-mode "R"))))
#+END_SRC
      
**** babel-langs
#+BEGIN_SRC emacs-lisp 
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)))
#+END_SRC

**** src blocks face
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-src-block-faces  '(("emacs-lisp" (:foreground "#FFFFFF"))
      ("python" (:background "#e5ffb8"))))
#+END_SRC

**** refile targets
Set 1 to 2 if I want to include every sub* in files
#+BEGIN_SRC emacs-lisp 
  (setq org-refile-targets '((org-agenda-files :maxlevel . 1)
                             (nil :maxlevel . 9)
                             ))
  (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
  (setq org-refile-use-outline-path t)                  ; Show full paths for refiling
#+END_SRC

*** org-agenda
**** agenda files
#+BEGIN_SRC emacs-lisp 
  (setq org-agenda-files '("/home/gramanas/org"))
#+END_SRC

**** agenda kbd
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-c a g e") 'org-agenda)
#+END_SRC

*** expand region
#+BEGIN_SRC emacs-lisp 
(require 'expand-region)

(global-set-key (kbd "C->")  'er/expand-region)
(global-set-key (kbd "C-<")  'er/contract-region)
#+END_SRC

*** change inside
#+BEGIN_SRC emacs-lisp 
  (require 'change-inner)
  (global-set-key (kbd "M-i") 'change-inner)
  (global-set-key (kbd "M-o") 'change-outer)
#+END_SRC

*** smartparens
**** Initialize
#+BEGIN_SRC emacs-lisp 
  (require 'smartparens-config)
#+END_SRC

*** embrace
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-c C-'") #'embrace-commander)
#+END_SRC

*** Helm
**** COMMENT noob config
  (require 'helm)
  (require 'helm-config)

  (setq helm-split-window-in-side-p t
        helm-M-x-fuzzy-match t
        helm-buffers-fuzzy-matching t
        helm-recentf-fuzzy-match t
        helm-move-to-line-cycle-in-source nil)

  (when (executable-find "ack")
    (setq helm-grep-default-command
          "ack -Hn --no-group --no-color %e %p %f"
          helm-grep-default-recurse-command
          "ack -H --no-group --no-color %e %p %f"))

  (helm-mode 1)
  (helm-adaptive-mode 1)

**** General
#+BEGIN_SRC emacs-lisp 
  (require 'helm)
  (require 'helm-config)
  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))

  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

  (when (executable-find "curl")
    (setq helm-google-suggest-use-curl-p t)) 

  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t
        helm-move-to-line-cycle-in-source     nil ; don't stop in recent commands instead cycle through everything
        helm-echo-input-in-header-line nil)

  (defun spacemacs//helm-hide-minibuffer-maybe ()
    "Hide minibuffer in Helm session if we use the header line as input field."
    (when (with-helm-buffer helm-echo-input-in-header-line)
      (let ((ov (make-overlay (point-min) (point-max) nil nil t)))
        (overlay-put ov 'window (selected-window))
        (overlay-put ov 'face
                     (let ((bg-color (face-background 'default nil)))
                       `(:background ,bg-color :foreground ,bg-color)))
        (setq-local cursor-type nil))))


  (add-hook 'helm-minibuffer-set-up-hook
            'spacemacs//helm-hide-minibuffer-maybe)

  (setq helm-inherit-input-method nil) ; dont inherit input method from current buffer

  (setq helm-autoresize-max-height 0)
  (setq helm-autoresize-min-height 30)
  (helm-autoresize-mode 1)

  (helm-mode 1)
#+END_SRC

**** M-x
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "M-x") 'helm-M-x)
  (setq helm-M-x-fuzzy-match t) ;; optional fuzzy matching for helm-M-x
#+END_SRC

**** Mini - buffers
#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "C-x b") 'helm-mini)

(setq helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match    t)
#+END_SRC

**** find-files
#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC

**** kill-ring
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
#+END_SRC

*** rtags
**** init
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elpa/rtags/")
  (require 'rtags)

  (require 'rtags-helm)
  (setq rtags-use-helm t)
#+END_SRC

**** keybindings
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "M-.") (function rtags-find-symbol-at-point))
  (define-key global-map (kbd "M-,") (function rtags-find-references-at-point))
  (define-key global-map (kbd "M-;") (function rtags-find-file))
  (define-key global-map (kbd "C-.") (function rtags-find-symbol))
  (define-key global-map (kbd "C-,") (function rtags-find-references))
  (define-key global-map (kbd "M-[") (function rtags-location-stack-back))
  (define-key global-map (kbd "M-]") (function rtags-location-stack-forward))
#+END_SRC

*** Auto Complete
**** Company
***** Initialize
#+BEGIN_SRC emacs-lisp 
  (add-to-list 'load-path "~/.emacs.d/elpa/company-20160829.1206")
  (require 'company)
  (add-hook 'after-init-hook 'global-company-mode)
  (require 'company-rtags)
  (setq rtags-completions-enabled t)
#+END_SRC

***** backends
#+BEGIN_SRC emacs-lisp
  (setq company-backends ())
  (push 'company-dabbrev company-backends)
  (push 'company-keywords company-backends)
  (push 'company-dabbrev-code company-backends)
  (push 'company-anaconda company-backends)
  (push 'company-yasnippet company-backends)
  (push 'company-capf company-backends)
  (push 'company-files company-backends)
  (push 'company-clang company-backends)
  (push 'company-rtags company-backends)
#+END_SRC

***** Aggresive auto complete
#+BEGIN_SRC emacs-lisp  
(setq company-idle-delay 0
      company-echo-delay 0
      company-dabbrev-downcase nil
      company-minimum-prefix-length 2
      company-selection-wrap-around t
      company-transformers '(company-sort-by-occurrence
                             company-sort-by-backend-importance))
#+END_SRC

***** Keybindings
****** Manual Begin
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-;") 'company-manual-begin)
#+END_SRC

****** Next-Prev
#+BEGIN_SRC emacs-lisp 
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC

***** helm interface
#+BEGIN_SRC emacs-lisp 
  (eval-after-load 'company
    '(progn
       (define-key company-mode-map (kbd "C-:") 'helm-company)
       (define-key company-active-map (kbd "C-s") 'helm-company)))
#+END_SRC

***** Style
#+BEGIN_SRC emacs-lisp 
  (setq company-tooltip-align-annotations t)

  (custom-set-faces
   '(company-preview
     ((t (:foreground "darkgray" :underline t))))
   '(company-preview-common
     ((t (:inherit company-preview))))
   '(company-tooltip
     ((t (:background "gray4" :foreground "gray85"))))
   '(company-tooltip-selection 
     ((t (:background "dark olive green" :foreground "gray100"))))
   '(company-tooltip-annotation
     ((t (:background "gray4" :foreground "goldenrod1"))))   
   '(company-tooltip-annotation-selection
     ((t (:background "dark olive green" :foreground "goldenrod1"))))
   '(company-tooltip-common
     ((t (:background "gray4" :foreground "gray42"))))
   '(company-tooltip-common-selection
     ((t (:background "dark olive green" :foreground "gray69")))))
#+END_SRC

***** Tab cycles
#+BEGIN_SRC emacs-lisp :tangle no
  (eval-after-load 'company
    '(progn
       (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
       (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)))
  (eval-after-load 'company
    '(progn
       (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
       (define-key company-active-map (kbd "<backtab>") 'company-select-previous)))
#+END_SRC

***** yasnippet
#+BEGIN_SRC emacs-lisp
  (eval-after-load "company"
    '(add-to-list 'company-backends 'company-yasnippet))
#+END_SRC

**** ac
#+BEGIN_SRC emacs-lisp
;;  (add-hook 'after-init-hook #'auto-complete-mode)
;;  (ac-config-default)
;;  (setq ac-use-menu-map t)
;;  (ac-set-trigger-key "TAB")
;;  (setq ac-auto-start 3)
;;  (set-face-background 'ac-candidate-face "color-235")
;;  (set-face-underline 'ac-candidate-face "color-235")
;;  (set-face-foreground 'ac-candidate-face "#008b8b")
;;  (set-face-background 'ac-completion-face "brightblack")
;;  (set-face-underline 'ac-completion-face "color-235")
;;  (set-face-foreground 'ac-completion-face "#008b8b")
#+END_SRC

*** flycheck
#+BEGIN_SRC emacs-lisp 
  ;(add-hook 'after-init-hook #'global-flycheck-mode)
  ;(require 'helm-flycheck) ;; Not necessary if using ELPA package
  (eval-after-load 'flycheck
    '(define-key flycheck-mode-map (kbd "C-c ! h") 'helm-flycheck))
#+END_SRC

*** Projectile
#+BEGIN_SRC emacs-lisp 
  (require 'helm-projectile)
  (helm-projectile-on)
  (setq projectile-completion-system 'helm)
#+END_SRC

*** ace mode
**** jump around
#+BEGIN_SRC emacs-lisp 
(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)

(global-set-key (kbd "C-c s") 'ace-jump-char-mode)

;enable a more powerful jump back function from ace jump mode

(autoload
  'ace-jump-mode-pop-mark
  "ace-jump-mode"
  "Ace jump back:-)"
  t)
(eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
(global-set-key (kbd "C-c M-c") 'ace-jump-mode-pop-mark)
#+END_SRC

**** windows
#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "C-x o") 'ace-window)
#+END_SRC

**** multiple cursors
#+BEGIN_SRC emacs-lisp 
(global-set-key (kbd "C-c m") 'ace-mc-add-multiple-cursors)
(global-set-key (kbd "C-c M") 'ace-mc-add-single-cursor)
#+END_SRC

*** fill column
#+BEGIN_SRC emacs-lisp :tangle no
;; fci-mode enabled
;; (require 'fill-column-indicator)

;; this makes fci off @ dired and other stuff where you don't need it
;; (define-globalized-minor-mode global-fci-mode fci-mode
;;   (lambda ()
;;     (if (and
;; 	 (not (string-match "^\*.*\*$" (buffer-name)))
;; 	 (not (eq major-mode 'dired-mode))
;; 	 (not (eq major-mode 'org-mode)))
;; 	(fci-mode 1))))
;; (global-fci-mode 1)
#+END_SRC

*** linum-relative
relative line numbers (like Vim)
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'linum-relative)
  (linum-on)
  (setq linum-relative-current-symbol "")
  (linum-relative-on)
#+END_SRC

*** yasnippet
#+BEGIN_SRC emacs-lisp
  (require 'yasnippet)
  (yas-global-mode 1)
#+END_SRC

*** multiple cursors
#+BEGIN_SRC emacs-lisp 
  (require 'multiple-cursors)
  (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
  (global-set-key (kbd "C-c e l") 'mc/edit-lines)
#+END_SRC

*** magit
**** magit-status
#+BEGIN_SRC emacs-lisp 
  (global-set-key (kbd "C-x m") 'magit-status)
#+END_SRC

*** iedit mode
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c ;") 'iedit-mode)
#+END_SRC

*** ggtags
**** No helm
#+BEGIN_SRC emacs-lisp
;  (require 'ggtags)
;  (add-hook 'c-mode-common-hook
;            (lambda ()
;              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
;                (ggtags-mode 1))))
;
;  (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
;  (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
;  (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
;  (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
;  (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
;  (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)
;
;  (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
#+END_SRC

**** helm
#+BEGIN_SRC emacs-lisp
;  (setq
;   helm-gtags-ignore-case t
;   helm-gtags-auto-update t
;   helm-gtags-use-input-at-cursor t
;   helm-gtags-pulse-at-cursor t
;   helm-gtags-prefix-key "\C-cg"
;   helm-gtags-suggested-key-mapping t
;   )

;  (require 'helm-gtags)
;  ;; Enable helm-gtags-mode
;  (add-hook 'dired-mode-hook 'helm-gtags-mode)
;  (add-hook 'eshell-mode-hook 'helm-gtags-mode)
;  (add-hook 'c-mode-hook 'helm-gtags-mode)
;  (add-hook 'c++-mode-hook 'helm-gtags-mode)
;  (add-hook 'asm-mode-hook 'helm-gtags-mode)
;
;  (define-key helm-gtags-mode-map (kbd "C-c g a") 'helm-gtags-tags-in-this-function)
;  (define-key helm-gtags-mode-map (kbd "C-j") 'helm-gtags-select)
;  (define-key helm-gtags-mode-map (kbd "M-.") 'helm-gtags-dwim)
;  (define-key helm-gtags-mode-map (kbd "M-,") 'helm-gtags-pop-stack)
;  (define-key helm-gtags-mode-map (kbd "C-c <") 'helm-gtags-previous-history)
;  (define-key helm-gtags-mode-map (kbd "C-c >") 'helm-gtags-next-history)
#+END_SRC

** hooks
*** prog mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'linum-mode)
  (add-hook 'prog-mode-hook 'projectile-mode)
  (add-hook 'prog-mode-hook 'smartparens-mode)
  (add-hook 'prog-mode-hook 'flycheck-mode)
#+END_SRC

*** python
#+BEGIN_SRC emacs-lisp 
  (add-hook 'python-mode-hook 'anaconda-mode)
#+END_SRC

*** new frame
#+BEGIN_SRC emacs-lisp
  (defun my-frame-setup ()
    (set-frame-font "Source Code Pro 10"))

;  (setq after-make-frame-functions 'my-frame-setup)
#+END_SRC

* Key Bindings
| Mode   | kbd       | action      |
|--------+-----------+-------------|
| Global | C-x k     | Kill buffer |
| Global | C-c C-c s | Sudoedit    |

